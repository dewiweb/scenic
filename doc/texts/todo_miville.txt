= Miville roadmap =
== Todo ==
=== Streamer states ===
==== session : stream : streamer ====
* Distinct signals for success, problem, etc (don't just reuse one signal for all with a different key)
* remove deferred from ProcessManager, use signals instead. 
 * notify the api the way it used to be.
 * manage contact.stream_state like before.
 * merged again streamers to stream.
 * MilhouseFactory must add a Streamer to the session
 * Streamers must belong to session, not MilhouseFactory objects.
 
 * manager._start calls service.start which creates MilhouseStreamer matching session.StreamDescription.*streamers
 * Store StreamerProblems in Stream when it occurs
 * Send ERROR message (SSIP) to remote agent when it occurs. Use error codes 
 * Change RemoteStreamer state when got error message
 * Stop stream when any streamer has any StreamerProblem. 
 * Make sure any exception is catched and causes a StreamingProblem.
 * Manage session and streamer states. (use states.* constants)
 * Clear session when done.
 * Make sure the MilhouseFactory frees the ports of its local streamers.
 * Make sure keys for streamers are in the form agent:service_name:number:mode (ex: local:milhouse:0:send)

=== custom conf entries ===
 * CustomEntries in conf. 
 * add CustomEntries : v4l2/input, v4l2/norm, etc.
 * Web GUI for (a/v devices) custom entries. (see mockup_custom_entries.html)
 * add long descriptions to conf entries.

---------------------

== Nice to have ==
=== cleanup ===
 * log.start should use kwargs to be more explicit.
 * Notifications should be dicts everywhere (?)
 * Notification should never be instances of exception. 
 * stores streamers by remote and local instead of offerer and answerer.

=== stream_state ===
 * Remove stream_state from contact, put it in session.
 * Implement manager.get_session_state(contact). (sic) (or list_streams_for_contact)
 * Make sure api.py, clip.py, widgets/addressbook and widgets/streams do not use contact.stream_state.


=== SSIP ===
 * change com_chan for ASCII SSIP
 * dialogs are built around com_chan and should all extend the same Dialog class. They might become deprecated once we move towards a utf8 simpler protocol.

== Done ==
 * Merge session.py and manager.py. Put states in states.py.
 * rename Milhouse service for milhouse.
  * Parse milhouse output to check for problems 
 * implement INVITE, OK, ACK
 * implement STOP, OK
 * changed observer for signal/slot
 * put main in runner.
