# Sequence diagram for network tests
#
msc 
{
#width = "800";
    hscale = "1.5";
    cli, api, tester, remote;

# 1) startup poutine
    --- [label = "Application Startup", textcolor = "#440088"];
    cli => api [label = "start(api)"];
    api => api [label = "start_server()"];
    ...;
    
# 2) uni / seq
    --- [label = "Unidirectional / Sequential Test", textcolor = "#440088"];
    cli => api [label = ">>> network -k uni -b 30 -t 10"];
    api => tester [label = "network_start_test(caller, uni, 30, 10)"];
    api => cli [label = ">>>"];
    tester => tester [label = "start_client(caller, contact.address, 30, 10)"];
    ...;
    tester => api [label = "notify(caller, (data),  'network_test')"];
    api => cli [label = "update(caller, 'network_test', (data)"];
    
# 3) Bidirectional 
    --- [label = "Bidirectional Test (client side)", textcolor = "#440088"];
    cli => api [label = ">>> network -k bi -b 30 -t 10"];
    api => tester [label = "network_start_test(caller, 'bi', 30, 10)"];
    api => cli [label = ">>>"];
    tester => remote [label = "reactor.connectTCP(contact.address)"];
    tester => remote [label = "ping"];
    ...;
    remote => tester [label = "pong"];
    ...;
    tester => remote [label = "test <delay_ms> 30 10"];
    ...;
    tester => tester [label = "start_client(caller, contact.address, 30, 10, 'bi client')"]; # as a bidirectional client
    ...;
    remote => tester [label = "test done <stats>"];
    ...;
    tester => api [label = "notify(caller, (data),  'network_test')"];
    api => cli [label = "update(caller, 'network_test', (data)"];
    cli => cli [label = ">>>"];

    --- [label = "Bidirectional Test (server side)", textcolor = "#440088"];
    remote => tester [label = "test <delay_ms> 30 10"];
    tester => tester [label = "start_client(caller, contact.address, 30, 10, 'bi server')"]; # as a bidirectional server
    ...;
    tester => api [label = "notify(caller, (data),  'network_test')"];
    api => cli [label = "update(caller, 'network_test', (data)"];
}

