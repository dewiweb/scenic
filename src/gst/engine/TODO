NTA:
-py script to generate jack.plumbing
-set window title
-use boost.program_options
-create caps.h and caps.cpp, add check-caps command-line flag to verify that caps.h matches the caps we generate at runtime, and 
provide info
-use osc style path for tcp messages
-use boost signals.slots instead of current msg passing/handling 
-if we have a sender and receiver going, the receiver should for now gracefully ignore subsequent senders after the first sender goes out

HELLO_WORLD:
-change v4l capture thread's sched policy to RR, as per the examples in gstreamer/tests/examples/streams
-integrate MIDI
-get non blocking input from command-line
-rhythmbox uses autoaudiosink, should we? or just look at how autoaudiosink is implemented
-use more message passing, try mike's approach of path=ClassName, args[0]=handler_method, args[1-n]...
-use milhouse command line to generate caps
-Get rid of singletons, rather have an application space all the necessary objects can listen.
-make sure no exceptions can be thrown from destructors
