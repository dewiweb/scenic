!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
AVG_	siprtp.c	1566;"	d	file:
BIGVAL	siprtp.c	1567;"	d	file:
MAX_	siprtp.c	1565;"	d	file:
MAX_CALLS	siprtp.c	95;"	d	file:
MENU	siprtp.c	/^static const char *MENU =$/;"	v	file:
MIN_	siprtp.c	1564;"	d	file:
POLICY	siprtp.c	1122;"	d	file:
RTP_START_PORT	siprtp.c	96;"	d	file:
THIS_FILE	siprtp.c	94;"	d	file:
USAGE	siprtp.c	/^static const char *USAGE = $/;"	v	file:
active	siprtp.c	/^    pj_bool_t		    active;	    \/* Non-zero if is in call.	*\/$/;"	m	struct:media_stream	file:
app	siprtp.c	/^static struct app$/;"	s	file:
app	siprtp.c	/^} app;$/;"	v	typeref:struct:app	file:
app_log_level	siprtp.c	/^    int			     app_log_level;$/;"	m	struct:app	file:
app_log_writer	siprtp.c	/^static void app_log_writer(int level, const char *buffer, int len)$/;"	f	file:
app_logging_init	siprtp.c	/^pj_status_t app_logging_init(void)$/;"	f
app_logging_shutdown	siprtp.c	/^void app_logging_shutdown(void)$/;"	f
app_perror	siprtp.c	/^static void app_perror(const char *sender, const char *title, $/;"	f	file:
audio_codec	siprtp.c	/^    struct codec	 audio_codec;$/;"	m	struct:app	typeref:struct:app::codec	file:
audio_codecs	siprtp.c	/^struct codec audio_codecs[] = $/;"	v	typeref:struct:codec
auto_quit	siprtp.c	/^    pj_bool_t		 auto_quit;$/;"	m	struct:app	file:
bit_rate	siprtp.c	/^    unsigned	bit_rate;$/;"	m	struct:codec	file:
boost_priority	siprtp.c	/^static void boost_priority(void)$/;"	f	file:
boost_priority	siprtp.c	1181;"	d	file:
bytes_per_frame	siprtp.c	/^    unsigned		 bytes_per_frame;   \/* frame size.		*\/$/;"	m	struct:media_stream	file:
call	siprtp.c	/^    struct call		 call[MAX_CALLS];$/;"	m	struct:app	typeref:struct:app::call	file:
call	siprtp.c	/^struct call$/;"	s	file:
call_gap	siprtp.c	/^    unsigned		 call_gap;$/;"	m	struct:app	file:
call_get_duration	siprtp.c	/^static void call_get_duration(int call_index, pj_time_val *dur)$/;"	f	file:
call_index	siprtp.c	/^    unsigned		    call_index;	    \/* Call owner.		*\/$/;"	m	struct:media_stream	file:
call_on_forked	siprtp.c	/^static void call_on_forked(pjsip_inv_session *inv, pjsip_event *e)$/;"	f	file:
call_on_media_update	siprtp.c	/^static void call_on_media_update( pjsip_inv_session *inv,$/;"	f	file:
call_on_state_changed	siprtp.c	/^static void call_on_state_changed( pjsip_inv_session *inv, $/;"	f	file:
call_report	siprtp.c	/^    pj_bool_t		 call_report;$/;"	m	struct:app	file:
clock_rate	siprtp.c	/^    unsigned		 clock_rate;	    \/* clock rate		*\/$/;"	m	struct:media_stream	file:
clock_rate	siprtp.c	/^    unsigned	clock_rate;$/;"	m	struct:codec	file:
codec	siprtp.c	/^struct codec$/;"	s	file:
connect_time	siprtp.c	/^    pj_time_val		 connect_time;$/;"	m	struct:call	file:
console_main	siprtp.c	/^static void console_main()$/;"	f	file:
cp	siprtp.c	/^    pj_caching_pool	 cp;$/;"	m	struct:app	file:
create_sdp	siprtp.c	/^static pj_status_t create_sdp( pj_pool_t *pool,$/;"	f	file:
d_timer	siprtp.c	/^    pj_timer_entry	 d_timer;	    \/**< Disconnect timer.	*\/$/;"	m	struct:call	file:
description	siprtp.c	/^    char*	    description;$/;"	m	struct:codec	file:
destroy_call_media	siprtp.c	/^static void destroy_call_media(unsigned call_index)$/;"	f	file:
destroy_media	siprtp.c	/^static void destroy_media()$/;"	f	file:
destroy_sip	siprtp.c	/^static void destroy_sip()$/;"	f	file:
duration	siprtp.c	/^    unsigned		 duration;$/;"	m	struct:app	file:
good_number	siprtp.c	/^static const char *good_number(char *buf, pj_int32_t val)$/;"	f	file:
hangup_all_calls	siprtp.c	/^static void hangup_all_calls()$/;"	f	file:
hangup_call	siprtp.c	/^static void hangup_call(unsigned index)$/;"	f	file:
in_sess	siprtp.c	/^    pjmedia_rtp_session	 in_sess;	    \/* incoming RTP session	*\/$/;"	m	struct:media_stream	file:
index	siprtp.c	/^    unsigned		 index;$/;"	m	struct:call	file:
init_media	siprtp.c	/^static pj_status_t init_media()$/;"	f	file:
init_options	siprtp.c	/^static pj_status_t init_options(int argc, char *argv[])$/;"	f	file:
init_sip	siprtp.c	/^static pj_status_t init_sip()$/;"	f	file:
inv	siprtp.c	/^    pjsip_inv_session*  inv;$/;"	m	struct:call	file:
list_calls	siprtp.c	/^static void list_calls()$/;"	f	file:
local_addr	siprtp.c	/^    pj_str_t		 local_addr;$/;"	m	struct:app	file:
local_contact	siprtp.c	/^    pj_str_t		 local_contact;$/;"	m	struct:app	file:
local_uri	siprtp.c	/^    pj_str_t		 local_uri;$/;"	m	struct:app	file:
log_file	siprtp.c	/^static FILE *log_file;$/;"	v	file:
log_filename	siprtp.c	/^    char*            log_filename;$/;"	m	struct:app	file:
log_level	siprtp.c	/^    int			     log_level;$/;"	m	struct:app	file:
logger_on_rx_msg	siprtp.c	/^static pj_bool_t logger_on_rx_msg(pjsip_rx_data *rdata)$/;"	f	file:
logger_on_tx_msg	siprtp.c	/^static pj_status_t logger_on_tx_msg(pjsip_tx_data *tdata)$/;"	f	file:
main	siprtp.c	/^int main(int argc, char *argv[])$/;"	f
make_call	siprtp.c	/^static pj_status_t make_call(const pj_str_t *dst_uri)$/;"	f	file:
max_calls	siprtp.c	/^    unsigned		 max_calls;$/;"	m	struct:app	file:
med_endpt	siprtp.c	/^    pjmedia_endpt*   med_endpt;$/;"	m	struct:app	file:
media	siprtp.c	/^    struct media_stream	 media[1];$/;"	m	struct:call	typeref:struct:call::media_stream	file:
media_count	siprtp.c	/^    unsigned		 media_count;$/;"	m	struct:call	file:
media_index	siprtp.c	/^    unsigned		    media_index;	    \/* Media index in call.	*\/$/;"	m	struct:media_stream	file:
media_stream	siprtp.c	/^struct media_stream$/;"	s	file:
media_thread	siprtp.c	/^static int media_thread(void *arg)$/;"	f	file:
mod_siprtp	siprtp.c	/^static pjsip_module mod_siprtp =$/;"	v	file:
msg_logger	siprtp.c	/^static pjsip_module msg_logger = $/;"	v	file:
name	siprtp.c	/^    char*	    name;$/;"	m	struct:codec	file:
on_rx_request	siprtp.c	/^static pj_bool_t on_rx_request( pjsip_rx_data *rdata )$/;"	f	file:
on_rx_rtcp	siprtp.c	/^static void on_rx_rtcp(void *user_data, void *pkt, pj_ssize_t size)$/;"	f	file:
on_rx_rtp	siprtp.c	/^static void on_rx_rtp(void *user_data, void *pkt, pj_ssize_t size)$/;"	f	file:
out_sess	siprtp.c	/^    pjmedia_rtp_session	 out_sess;	    \/* outgoing RTP session	*\/$/;"	m	struct:media_stream	file:
pool	siprtp.c	/^    pj_pool_t*       pool;$/;"	m	struct:app	file:
print_avg_stat	siprtp.c	/^static void print_avg_stat(void)$/;"	f	file:
print_call	siprtp_report.c	/^static void print_call(int call_index)$/;"	f	file:
process_incoming_call	siprtp.c	/^static void process_incoming_call(pjsip_rx_data *rdata)$/;"	f	file:
pt	siprtp.c	/^    unsigned	pt;$/;"	m	struct:codec	file:
ptime	siprtp.c	/^    unsigned	ptime;$/;"	m	struct:codec	file:
report_filename	siprtp.c	/^    char*            report_filename;$/;"	m	struct:app	file:
response_time	siprtp.c	/^    pj_time_val		 response_time;$/;"	m	struct:call	file:
rtcp	siprtp.c	/^    pjmedia_rtcp_session rtcp;		    \/* incoming RTCP session.	*\/$/;"	m	struct:media_stream	file:
rtp_start_port	siprtp.c	/^    int			     rtp_start_port;$/;"	m	struct:app	file:
samples_per_frame	siprtp.c	/^    unsigned		 samples_per_frame; \/* samples per frame	*\/$/;"	m	struct:media_stream	file:
si	siprtp.c	/^    pjmedia_stream_info	 si;		    \/* Current stream info.	*\/$/;"	m	struct:media_stream	file:
simple_input	siprtp.c	/^static pj_bool_t simple_input(const char *title, char *buf, pj_size_t len)$/;"	f	file:
sip_endpt	siprtp.c	/^    pjsip_endpoint*  sip_endpt;$/;"	m	struct:app	file:
sip_port	siprtp.c	/^    int			     sip_port;$/;"	m	struct:app	file:
sip_thread	siprtp.c	/^    pj_thread_t*     sip_thread[1];$/;"	m	struct:app	file:
sip_worker_thread	siprtp.c	/^static int sip_worker_thread(void *arg)$/;"	f	file:
start_time	siprtp.c	/^    pj_time_val		 start_time;$/;"	m	struct:call	file:
thread	siprtp.c	/^    pj_thread_t*     thread;	    \/* Media thread.		*\/$/;"	m	struct:media_stream	file:
thread_count	siprtp.c	/^    unsigned		 thread_count;$/;"	m	struct:app	file:
thread_quit	siprtp.c	/^    pj_bool_t		 thread_quit;$/;"	m	struct:app	file:
thread_quit_flag	siprtp.c	/^    pj_bool_t		 thread_quit_flag;  \/* Stop media thread.	*\/$/;"	m	struct:media_stream	file:
timer_disconnect_call	siprtp.c	/^static void timer_disconnect_call( pj_timer_heap_t *timer_heap,$/;"	f	file:
transport	siprtp.c	/^    pjmedia_transport   *transport;	    \/* To send\/recv RTP\/RTCP	*\/$/;"	m	struct:media_stream	file:
uac_calls	siprtp.c	/^    unsigned		 uac_calls;$/;"	m	struct:app	file:
uri_to_call	siprtp.c	/^    pj_str_t		 uri_to_call;$/;"	m	struct:app	file:
